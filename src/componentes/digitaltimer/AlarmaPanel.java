/*
LICENCIA JOSE JAVIER BO
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Beans/Bean.java to edit this template
Lista de paquetes:
 */
package componentes.digitaltimer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Date;
import javax.swing.JSpinner;
import javax.swing.JSpinner.DateEditor;

/**
 * Panel de edicion del atributo Alarma
 * @author Jose Javier BO
 */
public class AlarmaPanel extends javax.swing.JPanel implements ActionListener {

    private boolean vMostrarSegundos=false;
    private boolean doceHoras = true;
    
    /**
     * Creates new form AlarmaPanel
     */
    public AlarmaPanel() {
        initComponents();
        initPropio();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        inputHora = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        inputTipo = new javax.swing.JComboBox<>();
        alarmaActiva = new javax.swing.JCheckBox();
        mostrarSegundos = new javax.swing.JCheckBox();

        inputHora.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(), null, null, java.util.Calendar.HOUR_OF_DAY));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("Hora de la alarma:");

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Formato:");

        inputTipo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "12 Horas", "24 Horas" }));
        inputTipo.setActionCommand("inputTipo");

        alarmaActiva.setText("Alarma activa");

        mostrarSegundos.setText("mostrarSegundos");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(alarmaActiva)
                    .addComponent(inputTipo, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inputHora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mostrarSegundos))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(mostrarSegundos)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(inputTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(inputHora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(alarmaActiva)
                .addContainerGap(10, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox alarmaActiva;
    private javax.swing.JSpinner inputHora;
    private javax.swing.JComboBox<String> inputTipo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JCheckBox mostrarSegundos;
    // End of variables declaration//GEN-END:variables

    private void initPropio() {
        inputTipo.addActionListener(this);
        mostrarSegundos.addActionListener(this);
        refrescarEditorHora();
    }
    
    /**
     * Retorna los datos a configurar en formato Alarma
     * @return Los datos configurados
     */
    public Alarma getSelectedValue(){
        //recogr datos de la interfaz
        boolean mostrarSegundos=this.mostrarSegundos.isSelected();
        boolean doceHoras = this.inputTipo.getSelectedItem().toString().equals("12 Horas");
        Date dHora = (Date)inputHora.getValue();
        String hora =  Alarma.getHoraFormateada(dHora,doceHoras,mostrarSegundos);
        boolean alarmaActiva=this.alarmaActiva.isSelected();
        //crear y retornar el objeto Alarma
        return new Alarma(doceHoras, mostrarSegundos, hora, alarmaActiva);
    }

    /**
     * Escuhas a action performed
     * @param e 
     */
    @Override
    public void actionPerformed(ActionEvent e) {
        String ac = e.getActionCommand();
        
        switch (ac){
            //modificar el tipo de 12 o 24h. Actualizan el editor de hora para 
            //que se adapte alformato
            case "inputTipo": 
                doceHoras=inputTipo.getSelectedItem().toString().equals("12 Horas");
                refrescarEditorHora();
                break;
            //activar o desactivar la visualización de segundos. Actualizan el editor 
            //de hora para que se adapte alformato
            case "mostrarSegundos":
                vMostrarSegundos=mostrarSegundos.isSelected();
                refrescarEditorHora();
                break;
        }

    }

    /**
     * Modifica el DateEditor del spinner de seleccion de la hora 
     * ajustando su formato segun se muestren o no los segundos y segun sea 12 o 24h
     */
    private void refrescarEditorHora() {
        String formato= "";
        String fSegundos="";
        //seccion de segundos para el formato
        if (vMostrarSegundos){
            fSegundos=":ss";
        }
        
        //construccion del formato final segun 12 o 24h
        if (doceHoras){
            formato ="hh:mm"+fSegundos+" a";
        }else{
            formato = "HH:mm"+fSegundos;
        }
        
        //Crear y asignar el DateEditor
        DateEditor de = new JSpinner.DateEditor(inputHora, formato);
        de.getTextField().setEditable( false );
        inputHora.setEditor(de);
    }

    
}
